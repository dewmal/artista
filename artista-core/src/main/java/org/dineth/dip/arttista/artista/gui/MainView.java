/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.dineth.dip.arttista.artista.gui;

import java.awt.Dimension;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.dineth.dip.arttista.artista.core.ImageFile;
import org.dineth.dip.arttista.artista.core.enhance.EnhanceMenter;
import org.dineth.dip.arttista.artista.core.enhance.impl.LineEnhanceFactory;
import org.dineth.dip.arttista.artista.core.feature.FeatureExtractor;
import org.dineth.dip.arttista.artista.core.feature.impl.CircleExtractor;
import org.dineth.dip.arttista.artista.core.feature.impl.LineExtractor;
import org.dineth.dip.arttista.artista.core.feature.impl.RGBColourExtractor;
import org.openimaj.image.DisplayUtilities;
import org.openimaj.image.FImage;
import org.openimaj.image.ImageUtilities;
import org.openimaj.image.MBFImage;
import org.openimaj.image.colour.Transforms;
import org.openimaj.image.processing.algorithm.FourierTransform;
import org.openimaj.image.processing.resize.ResizeProcessor;

/**
 *
 * @author dewmal
 */
public class MainView extends javax.swing.JFrame {

    private static File DATA_LOCATION;
    private DefaultListModel<ImageFile> lm;
    private MBFImage readMBF;
    private FeatureExtractor extractor;

    /**
     * Creates new form MainView
     */
    public MainView() {
        initComponents();
        System.out.println("Working");

        lm = new DefaultListModel<ImageFile>();

        DATA_LOCATION = new File("/home/dewmalpc/dipdata");
        loadImagesIntoList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jlImages = new javax.swing.JList();
        jpImage = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        btAddImages = new javax.swing.JButton();
        btCircleExtractor = new javax.swing.JButton();
        btLines = new javax.swing.JButton();
        btFourTransform = new javax.swing.JButton();
        btEnhance = new javax.swing.JButton();
        btColorHistogram = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtDetails = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jlImages.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlImages.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jlImagesMouseClicked(evt);
            }
        });
        jlImages.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jlImagesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jlImages);

        javax.swing.GroupLayout jpImageLayout = new javax.swing.GroupLayout(jpImage);
        jpImage.setLayout(jpImageLayout);
        jpImageLayout.setHorizontalGroup(
            jpImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jpImageLayout.setVerticalGroup(
            jpImageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 520, Short.MAX_VALUE)
        );

        jToolBar1.setRollover(true);

        btAddImages.setText("Add ");
        btAddImages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddImagesActionPerformed(evt);
            }
        });
        jToolBar1.add(btAddImages);

        btCircleExtractor.setText("Circles");
        btCircleExtractor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCircleExtractorActionPerformed(evt);
            }
        });
        jToolBar1.add(btCircleExtractor);

        btLines.setText("Lines");
        btLines.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btLinesActionPerformed(evt);
            }
        });
        jToolBar1.add(btLines);

        btFourTransform.setText("FourierTransform");
        btFourTransform.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFourTransformActionPerformed(evt);
            }
        });
        jToolBar1.add(btFourTransform);

        btEnhance.setText("Enhance Image");
        btEnhance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEnhanceActionPerformed(evt);
            }
        });
        jToolBar1.add(btEnhance);

        btColorHistogram.setText("Color Histogram");
        btColorHistogram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btColorHistogramActionPerformed(evt);
            }
        });
        jToolBar1.add(btColorHistogram);

        jButton1.setText("Final Report");
        jToolBar1.add(jButton1);

        jtDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "size", "min", "max", "mean", "std dev", "median", "skewness", "kurtosis"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jtDetails);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jpImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadImagesIntoList() {






        File[] listFiles = DATA_LOCATION.listFiles();


        if (listFiles == null) {
            btAddImagesActionPerformed(null);
        } else {



            for (File file : listFiles) {

                lm.addElement(new ImageFile(file));
            }

            jlImages.setModel(lm);

        }
    }

    private void btAddImagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddImagesActionPerformed
        JFileChooser chooser = new JFileChooser();

        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int option = chooser.showOpenDialog(this);
        if (option == JFileChooser.OPEN_DIALOG) {

            DATA_LOCATION = chooser.getSelectedFile();

            loadImagesIntoList();

        }

    }//GEN-LAST:event_btAddImagesActionPerformed

    private void jlImagesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jlImagesValueChanged
    }//GEN-LAST:event_jlImagesValueChanged

    private void jlImagesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jlImagesMouseClicked

        if (evt.getClickCount() == 2) {
            int index = jlImages.locationToIndex(evt.getPoint());
            ImageFile imFile = lm.getElementAt(index);
            try {
                readMBF = ImageUtilities.readMBF(imFile.getImageFile());
                int width = readMBF.getWidth();
                int height = readMBF.getHeight();



                //Resize Image 
                ResizeProcessor rp = null;
                if (width * height < 512 * 512) {
                    rp = new ResizeProcessor(ResizeProcessor.Mode.DOUBLE);
                } else if (width * height > 1024 * 1024) {
                    rp = new ResizeProcessor(ResizeProcessor.Mode.HALF);
                }




                readMBF.processInplace(rp);




                MBFImage localImage = readMBF.clone();
               // rp = new ResizeProcessor(ResizeProcessor.Mode.HALF);
               // localImage = localImage.processInplace(rp);

                width = localImage.getWidth();
                height = localImage.getHeight();



                DisplayUtilities.ImageComponent c = new DisplayUtilities.ImageComponent();
                if (localImage != null) {
                    c.setImage(ImageUtilities.createBufferedImage(localImage));
                }
                c.setOriginalImage(localImage);
                c.setSize(width, height);
                c.setPreferredSize(new Dimension(c.getWidth(), c.getHeight()));


                jpImage.removeAll();
                jpImage.repaint();
              //  jpImage.setSize(jpImage.getWidth(), height);
                jpImage.add(c);

                //System.out.println(localImage);

                // DisplayUtilities.display(readMBF);

            } catch (IOException ex) {
                Logger.getLogger(MainView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_jlImagesMouseClicked

    private void btEnhanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEnhanceActionPerformed

        if (checkImage()) {
            LineEnhanceFactory lef = new LineEnhanceFactory(Transforms.calculateIntensity(readMBF));
            List<EnhanceMenter<FImage>> enhanceImages = lef.getLineEnhancers();

            for (EnhanceMenter<FImage> em : enhanceImages) {
                DisplayUtilities.display(em.enhance(), em.getName());
            }

        }

    }//GEN-LAST:event_btEnhanceActionPerformed

    private void btCircleExtractorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCircleExtractorActionPerformed
        if (checkImage()) {

            extractor = new CircleExtractor(readMBF);
            extractor.extractFeature();
            MBFImage image = extractor.getImage();
            DisplayUtilities.display(image);
        }
    }//GEN-LAST:event_btCircleExtractorActionPerformed

    private void btLinesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btLinesActionPerformed

        if (checkImage()) {

            extractor = new LineExtractor(readMBF);
            extractor.extractFeature();
        }
    }//GEN-LAST:event_btLinesActionPerformed

    private void btFourTransformActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFourTransformActionPerformed
        if (checkImage()) {
            FImage fImage = Transforms.calculateIntensity(readMBF);
            FourierTransform ft = new FourierTransform(fImage, true);

            DisplayUtilities.display(ft.getLogNormalisedMagnitude());
        }

    }//GEN-LAST:event_btFourTransformActionPerformed

    private void btColorHistogramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btColorHistogramActionPerformed

        if (checkImage()) {
            extractor = new RGBColourExtractor(readMBF);
            extractor.extractFeature();
        }

    }//GEN-LAST:event_btColorHistogramActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btAddImages;
    private javax.swing.JButton btCircleExtractor;
    private javax.swing.JButton btColorHistogram;
    private javax.swing.JButton btEnhance;
    private javax.swing.JButton btFourTransform;
    private javax.swing.JButton btLines;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JList jlImages;
    private javax.swing.JPanel jpImage;
    private javax.swing.JTable jtDetails;
    // End of variables declaration//GEN-END:variables

    private boolean checkImage() {

        if (readMBF != null) {
            return true;
        } else {

            JOptionPane.showMessageDialog(this, "Please Select Image Before Analyse", "warrning", JOptionPane.WARNING_MESSAGE);
            return false;
        }

    }
}
